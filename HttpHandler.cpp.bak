#include "HttpHandler.hpp"

HttpHandler::HttpHandler() {
    accountpool = AccountPool();
    carpool = CarPool();
}

HttpHandler::HttpHandler(AccountPool accountpool, CarPool carpool) {
    this->accountpool = accountpool;
    this->carpool = carpool;
}

void HttpHandler::handler_test_connection(const httplib::Request &req, httplib::Response &res) {
    res.set_content("Connection is OK", "text/plain");
    res.status = 200;
}

void HttpHandler::handler_login(const httplib::Request &req, httplib::Response &res) {
    std::string username = req.get_param_value("username");
    std::string passwd = req.get_param_value("passwd_hash");

    auto result = accountpool.verifyAccount(username, passwd);
    if (result == AccountPool::AccountVerifyResult::SUCCESS) {
        res.set_content("Login Success", "text/plain");
        res.status = 200;
    }
    else if (result == AccountPool::AccountVerifyResult::ACCOUNT_NOT_FOUND || \
            result == AccountPool::AccountVerifyResult::WRONG_PASSWORD) {
        res.set_content("Account Not Found or Wrong Password", "text/plain");
        res.status = 401;
    }
    else {
        res.set_content("Internal Server Error", "text/plain");
        res.status = 500;
    }
}

void HttpHandler::handler_change_password(const httplib::Request &req, httplib::Response &res) {
    std::string username = req.get_param_value("username");
    std::string old_passwd_hash = req.get_param_value("old_passwd_hash");
    std::string new_passwd_hash = req.get_param_value("new_passwd_hash");

    try {
        auto result = accountpool.verifyAccount(username, old_passwd_hash);
        if (result == AccountPool::AccountVerifyResult::SUCCESS) {
            Account old_acc = accountpool.getAccount(username);
            Account new_acc = Account(username, new_passwd_hash, old_acc.getAccountType());
            int status_code = accountpool.updateAccount(old_acc, new_acc);
            if(status_code == 0) {
                res.set_content("Password Changed", "text/plain");
                res.status = 200;
            }
            else {
                std::string msg = "Internal Server Error, status code: " + std::to_string(status_code);
                res.set_content(msg, "text/plain");
                res.status = 500;
            }
        }
        else if (result == AccountPool::AccountVerifyResult::ACCOUNT_NOT_FOUND || \
                result == AccountPool::AccountVerifyResult::WRONG_PASSWORD) {
            res.set_content("Forbidden", "text/plain");
            res.status = 403;
        }
        else {
            res.set_content("Internal Server Error", "text/plain");
            res.status = 500;
        }
    }
    catch (...) {
        res.set_content("Internal Server Error", "text/plain");
        res.status = 500;
    }
}

void HttpHandler::handler_get_carinfo(const httplib::Request &req, httplib::Response &res) {
    std::string username = req.get_param_value("username");
    std::string passwd_hash = req.get_param_value("passwd_hash");
    std::string car_id = req.get_param_value("car_id");
    std::string car_color_str = req.get_param_value("car_color");
    Color car_color = Color(car_color_str);
    std::string car_type = req.get_param_value("car_type");

    auto result = accountpool.verifyAccount(username, passwd_hash);
    if (result == AccountPool::AccountVerifyResult::SUCCESS) {
        std::vector<Car> cars = carpool.getCars(username);
        std::string carinfo = "";
        for (Car car : cars) {
            carinfo += car.getCarInfo() + "\n";
        }
        res.set_content(carinfo, "text/plain");
        res.status = 200;
    }
    else if (result == AccountPool::AccountVerifyResult::ACCOUNT_NOT_FOUND || \
            result == AccountPool::AccountVerifyResult::WRONG_PASSWORD) {
        res.set_content("Forbidden", "text/plain");
        res.status = 403;
    }
    else {
        res.set_content("Internal Server Error", "text/plain");
        res.status = 500;
    }
}
